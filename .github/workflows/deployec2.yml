name: Deploy Ec2

on:
  push

env:
  IP_RUNNER: 192.168.1.1/32

jobs:
  deploy:
    name: Deploy file to EC2
    runs-on: ubuntu-latest
    steps:

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@05b148adc31e091bafbaf404f745055d4d3bc9d2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Obtain public IP
        run: echo "IP_RUNNER=$(wget -qO- https://ipecho.net/plain)" >> $GITHUB_ENV ${{ secrets.TRASH }}

      - name: Authorize Access
        run: aws ec2 authorize-security-group-ingress --group-id "${{ secrets.AWS_SGWEB }}" --protocol tcp --port "${{ secrets.AWS_VMPORT }}" --cidr "${{ env.IP_RUNNER }}/32"

      - name: Prepare Runner
        shell: bash
        env:
          AWSKEY: ${{ secrets.AWS_KEY }}
        run: |
          config_ssh=~/.ssh/config
          keyfile=~/.ssh/Key.pem
          mkdir ~/.ssh && echo -e "ExitOnForwardFailure=yes\nStrictHostKeyChecking=no" > ${config_ssh} && chmod 600 ${config_ssh}
          echo ${AWSKEY} > ${keyfile} && chmod 600 ${keyfile}

      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b

      - name: Copy Files
        shell: bash
        env:
          AWSDESTINATION: ${{ secrets.AWS_DESTINATION }}
          AWSVMUSERNAME: ${{ secrets.AWS_VMUSERNAME }}
          AWSVMFQDN: ${{ secrets.AWS_VMFQDN }}
        run: |
          keyfile=~/.ssh/Key.pem
          scp -r -i ${keyfile} $GITHUB_WORKSPACE/data/* ${AWSVMUSERNAME}@${AWSVMFQDN}:${AWSDESTINATION}

      - name: Revoke Access
        if: always()
        run: aws ec2 revoke-security-group-ingress --group-id "${{ secrets.AWS_SGWEB }}" --protocol tcp --port "${{ secrets.AWS_VMPORT }}" --cidr "${{ env.IP_RUNNER }}/32"
